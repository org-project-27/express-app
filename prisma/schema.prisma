generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Objects {
  id         String   @id @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  name       String   @db.VarChar(255)
  path       String   @db.VarChar(255)
  type       String   @db.VarChar(255)
  user_id    Int
  object_for String   @db.VarChar(100)
  Users      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "objects_ibfk_1")
  @@index([user_id], map: "user_id")
}

model TokenSessions {
  id          Int         @id @default(autoincrement())
  created_for String      @db.VarChar(55)
  token       String      @db.VarChar(255)
  payload     Json
  expired_in  String      @db.VarChar(55)
  owner_id    Int
  UserDetails UserDetails @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "tokensessions_ibfk_1")

  @@index([owner_id], map: "owner_id")
}

model UserDetails {
  phone            String?         @unique(map: "phone") @db.VarChar(255)
  birthday         DateTime?       @db.Date
  bio              String?         @db.VarChar(510)
  email_registered Boolean
  preferred_lang   String?         @db.VarChar(50)
  profile_photo_id String?         @db.VarChar(255)
  user_id          Int             @id @unique(map: "user_id")
  TokenSessions    TokenSessions[]
  Users            Users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userdetails_ibfk_1")
}

model Users {
  id            Int          @id @default(autoincrement())
  fullname      String       @db.VarChar(255)
  email         String       @unique(map: "email") @db.VarChar(255)
  password      String       @db.VarChar(255)
  register_date String       @db.VarChar(55)
  Brands        Brands[]
  Objects       Objects[]
  UserDetails   UserDetails?
}

model PlacesList {
  place_id      Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  type          Int
  address       String         @db.VarChar(255)
  city          String         @db.VarChar(100)
  state         String         @db.VarChar(100)
  zip_code      String         @db.VarChar(20)
  phone         String         @db.VarChar(20)
  opening_hours String         @db.VarChar(255)
  brand_id      Int
  email         String         @db.VarChar(255)
  PlaceListType PlaceListType  @relation(fields: [type], references: [id])
  Brands        Brands         @relation(fields: [brand_id], references: [brand_id], onDelete: Cascade, onUpdate: NoAction, map: "placeslist_ibfk_1")
  ServicesList  ServicesList[]

  @@index([brand_id], map: "brand_id")
  @@index([type], map: "PlacesList_type_fkey")
}

model PlaceListType {
  id     Int          @id @default(autoincrement())
  value  String       @db.VarChar(255)
  places PlacesList[]
}

model ServicesList {
  service_id  Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  price       Decimal?   @db.Decimal(10, 2)
  category_id Int?
  place_id    Int
  PlacesList  PlacesList @relation(fields: [place_id], references: [place_id], onDelete: Cascade, onUpdate: NoAction, map: "serviceslist_ibfk_1")

  @@index([place_id], map: "place_id")
}

model Brands {
  brand_id   Int          @id @default(autoincrement())
  name       String       @unique(map: "name") @db.VarChar(255)
  logo       String?      @db.VarChar(255)
  bio        String?      @db.Text
  owner_id   Int
  website    String       @db.VarChar(255)
  Users      Users        @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "brands_ibfk_1")
  PlacesList PlacesList[]

  @@index([owner_id], map: "owner_id")
}
